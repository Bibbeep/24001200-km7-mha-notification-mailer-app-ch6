<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
</head>
<body>
    <h1>Create a new account</h1>
    <form id="register-form" action="/api/register" method="post">
        <div>
            <label for="Fullname">Full Name: </label>
            <input type="text" name="fullName" id="fullName" placeholder="Full Name" required>
        </div>
        <div>
            <label for="Email">Email: </label>
            <input type="email" name="email" id="email" placeholder="Email Address" required>
        </div>
        <div>
            <label for="Password">Password: </label>
            <input type="password" name="password" id="password" placeholder="Password" required>
        </div>
        <button type="submit">Register</button>
        <p>Already have an account? <a href="/api/login">Log in</a></p>
    </form>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const form = document.getElementById('register-form');

        socket.on('notification', (msg) => {
            alert(msg);
        });

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            const body = {
                fullName: formData.get('fullName'),
                email: formData.get('email'),
                password: formData.get('password')
            };

            fetch('/api/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            })
                .then((res) => res.json())
                .then((data) => {
                    if (data.status === 'OK') {
                        socket.emit('notification', data.message);
                        setTimeout(() => {
                            window.location.href = `/api/login?email=${body.email}`;
                        }, 2000);
                    } else {
                        socket.emit('notification', data.message);
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    }
                });
        });
    </script>
</body>
</html>